version: '3.8'

services:
  # Infrastructure Services
  discovery-server:
    image: oussama2003/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    env_file:
      - .env
    environment:
      SERVER_PORT: 8761
      EUREKA_SERVER: ${EUREKA_URL}
      EUREKA_INSTANCE_HOSTNAME: discovery-server
      EUREKA_CLIENT_REGISTER: "false"
      EUREKA_CLIENT_FETCH: "false"
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  # Databases
  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  task-db:
    image: postgres:15-alpine
    container_name: task-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: taskdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - task-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  history-db:
    image: postgres:15-alpine
    container_name: history-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: historydb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5435:5432"
    volumes:
      - history-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  notification-db:
    image: postgres:15-alpine
    container_name: notification-db
    env_file:
      - .env
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5436:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - microservices-network

  # Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "29092:29092"
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - microservices-network

  # Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  # Application Services
  auth-service:
    image: oussama2003/auth-service:latest
    container_name: auth-service
    ports:
      - "3002:3002"
    env_file:
      - .env
    environment:
      SERVER_PORT: 3002
      EUREKA_SERVER: ${EUREKA_URL}
      DATABASE_URL: jdbc:postgresql://auth-db:5432/authdb
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    depends_on:
      discovery-server:
        condition: service_healthy
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  task-service:
    image: oussama2003/task-service:latest
    container_name: task-service
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      SERVER_PORT: 3000
      EUREKA_SERVER: ${EUREKA_URL}
      DATABASE_URL: jdbc:postgresql://task-db:5432/taskdb
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    depends_on:
      discovery-server:
        condition: service_healthy
      task-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  notification-service:
    image: oussama2003/notification-service:latest
    container_name: notification-service
    ports:
      - "3003:3003"
    env_file:
      - .env
    environment:
      SERVER_PORT: 3003
      EUREKA_SERVER: ${EUREKA_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
      DATABASE_URL: jdbc:postgresql://notification-db:5432/notificationdb
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_SENDER: ${EMAIL_SENDER}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    depends_on:
      discovery-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      notification-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3003/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  history-service:
    image: oussama2003/history-service:latest
    container_name: history-service
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      SERVER_PORT: 3001
      EUREKA_SERVER: ${EUREKA_URL}
      DATABASE_URL: jdbc:postgresql://history-db:5432/historydb
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP}
    depends_on:
      discovery-server:
        condition: service_healthy
      history-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

  gateway-service:
    image: oussama2003/gateway-service:latest
    container_name: gateway-service
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SERVER_PORT: 8080
      EUREKA_SERVER: ${EUREKA_URL}
      REDIS_HOST: redis
      JWT_ISSUER_URI: http://auth-service:3002
      JWT_JWKS_URI: http://auth-service:3002/api/auth/.well-known/jwks.json
      RATE_LIMIT_REPLENISH: 10
      RATE_LIMIT_BURST: 20
    depends_on:
      discovery-server:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - microservices-network

volumes:
  auth-db-data:
  task-db-data:
  history-db-data:
  notification-db-data:
  redis-data:

networks:
  microservices-network:
    driver: bridge